-------------------------------------------------------------
---------------- Arch Linux by Marcelo Alves ----------------
-------- BRTFS on LUKS installation in a UEFI System --------
-------------------------------------------------------------

# Obs: Make sure you're actually booted in UEFI mode, and verify that Secure Boot is disabled

# Verify if your connection is OK. Use dhcpcd to wired connection, or wifi-menu to WiFi connections
ping google.com -c 5

# Use timedatectl to ensure the system clock is accurate, then check for the service status.
timedatectl set-ntp true

# Use lsblk and/or fdisk -l to list all drivers and choose the one you want to install

# Use fdisk, cfdisk or parted to create a partition scheme for your disk. Use GPT format.
# Example and my suggestion (assuming /dev/sda as the disk used)
# /dev/sda1 256M /boot EFI System Partition
# /dev/sda2 free space disk LVM

# Format the EFI System Partition (ESP) using vfat filesystem
mkfs.vfat -F32 /dev/sda1

# Encrypt the BRTFS partition using LUKS. Read this link to more information:
# https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption

# This is used in my setup
cryptsetup luksFormat -c aes-xts-plain64 -s 512 -h sha512 --use-random -i 30000 /dev/sda2

# Open the encrypted BRTFS partition
cryptsetup luksOpen /dev/sda2 cryptbtrfs

# Format the encrypted parition then mount it to /mnt.
mkfs.btrfs /dev/mapper/cryptbtrfs
mount /dev/mapper/cryptbtrfs /mnt

# Since BTRFS handles subvolumes as directories, use /mnt prefix when creating the
# subvolumes you'd like to. Finally unmount the BTRFS partition.
btrfs subvolume create /mnt/@
btrfs subvolume create /mnt/@home
umount /mnt

# Mount the subvolumes you've created to their respective mount points. Checkout
# the wiki for the best mounting options, as here just basic ones are provided.
mount -o compress=lzo,subvol=@ /dev/mapper/cryptbtrfs /mnt
mkdir /mnt/home
mount -o compress=lzo,subvol=@home /dev/mapper/cryptbtrfs /mnt/home

# Install base system using pacstrap. Include btrfs-progs.
pacstrap /mnt base base-devel btrfs-progs

# Generate the FSTAB using UUIDs then check it's fine
genfstab -U /mnt /mnt/etc/fstab
cat /mnt/etc/fstab | less

# Chroot into installation
arch-chroot /mnt

# Setup time zone and hardware clock
ln -sf /usr/share/zoneinfo/<region>/<city> /etc/localtime
hwclock --systohc --utc

# Uncomment the locale you want to be generated from /etc/locale.gen (pt_BR or en_US), then
# generate locale and set the LANG variable in /etc/locale.conf accoringly.
# You can set the keymap for your current language as well as the hostname
# you prefer.
locale-gen
echo "LANG=pt_BR.UTF-8" > /etc/locale.conf   OR
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "KEYMAP=us-acentos" > /etc/vconsole.conf   OR
echo "KEYMAP=br-abnt2" > /etc/vconsole.conf

# Choose a name to your machine
echo "<name hostname>" > /etc/hostname

# Configure mkinitcpio by adding encrypt hook before filesystems and after block.
# If you're configuring an image that does not use udev hook, then add btrfs
# after encrypt, but still before filesystems. To be able to use btrfs-check
# in case of emergency shell drop, add /usr/bin/btrfs to the binaries.
# Then regenerate the ramfs. If you'd like to skip multiple password entries
# during the boot process, keyfiles to unlock encrypted partitions can be
# embedded in the initramfs. Please follow this section of the wiki to do so:
# https://wiki.archlinux.org/index.php/Dm-crypt/Device_encryption#With_a_keyfile_embedded_in_the_initramfs

--> /etc/mkinitcpio.conf
    BINARIES="/usr/bin/btrfs"
    HOOKS="... block encrypt filesystems ..."

mkinitcpio -p linux

# Update the root password
passwd

# Install intel-ucode package if your CPU is Intel to enable microcodes updates, and install efibootmgr to UEFI compatibility
pacman -S intel-ucode grub efibootmgr

# Configure GRUB to recognize the LUKS encrypted boot partition and unlock the root BTRFS one at boot.

--> /etc/default/grub
    GRUB_CMDLINE_LINUX="... cryptdevice=UUID=</dev/sda2 UUID>:cryptbtrfs ..."
    GRUB_ENABLE_CRYPTODISK=y

# Install GRUB in boot partition
grub-install --target=x86_64-efi --efi-directory=/boot --recheck

# Install the GRUB config
grub-mkconfig -o /boot/grub/grub.cfg

# Installation is finished. Optionally, you can install the optionals packages recommended by me:
pacman -S wget git networkmanager dialog htop zsh elinks

# NetworkManager is better for me. If you prefer him, enable the service
systemctl enable NetworkManager.service

# Everything is done. Exit setup, umount all drivers and reboot
exit
umount -R /mnt
reboot
